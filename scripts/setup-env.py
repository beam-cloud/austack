#!/usr/bin/env python3
"""
Environment Setup Script

This script helps users set up their .env file with required API keys and configuration.

Usage:
    python -m scripts.setup-env DEEPGRAM_API_KEY OPENAI_API_KEY
    python scripts/setup-env.py DEEPGRAM_API_KEY BAML_API_KEY

The script will:
1. Check if a .env file exists, create one if it doesn't
2. Check for each provided key in the .env file
3. Prompt the user to enter values for missing keys
4. Add the new keys to the .env file
"""

import argparse
import os
import sys
from pathlib import Path
from typing import List, Dict, Optional

try:
    from dotenv import load_dotenv, set_key, find_dotenv
except ImportError:
    print("Error: python-dotenv is required but not installed.")
    print("Please install it with: pip install python-dotenv")
    sys.exit(1)


class EnvSetup:
    """Handles environment file setup and key management."""

    def __init__(self, env_file_path: Optional[str] = None):
        """
        Initialize the environment setup.

        Args:
            env_file_path: Path to .env file. If None, searches for .env in current/parent directories.
        """
        if env_file_path:
            self.env_file = Path(env_file_path)
        else:
            # Always use .env in current working directory
            self.env_file = Path(".env")

        self.env_vars: Dict[str, str] = {}
        self._load_existing_env()

    def _load_existing_env(self):
        """Load existing environment variables from .env file."""
        if self.env_file.exists():
            load_dotenv(self.env_file)
            print(f"Found existing .env file at: {self.env_file.absolute()}")

            # Read the file to get current key-value pairs
            with open(self.env_file, "r") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        self.env_vars[key.strip()] = value.strip()
        else:
            print(f"No existing .env file found. Will create: {self.env_file.absolute()}")

    def create_env_file_if_needed(self):
        """Create .env file if it doesn't exist."""
        if not self.env_file.exists():
            print(f"Creating new .env file at: {self.env_file.absolute()}")
            self.env_file.touch()

            # Add a header comment
            with open(self.env_file, "w") as f:
                f.write("# AuStack Environment Configuration\n")
                f.write("# Generated by setup-env.py script\n\n")

    def check_key_exists(self, key: str) -> bool:
        """Check if a key exists and has a value in the environment."""
        # Check both the loaded env vars and os.environ (in case it was set elsewhere)
        env_value = os.getenv(key)
        file_value = self.env_vars.get(key)

        # Consider a key as existing if it has a non-empty value in either place
        return bool((env_value and env_value.strip()) or (file_value and file_value.strip()))

    def get_user_input(self, key: str) -> str:
        """Get user input for a specific environment key."""
        print(f"\nüìù Setting up: {key}")

        hints = {
            "DEEPGRAM_API_KEY": "Get your API key from https://console.deepgram.com/",
            "OPENAI_API_KEY": "Get your API key from https://platform.openai.com/account/api-keys",
        }

        if key in hints:
            print(f"üí° Hint: {hints[key]}")

        while True:
            value = input(f"Enter value for {key}: ").strip()
            if value:
                return value
            else:
                print("‚ùå Value cannot be empty. Please enter a valid value.")

    def add_key_to_env(self, key: str, value: str):
        """Add a key-value pair to the .env file."""
        try:
            set_key(str(self.env_file), key, value)
            print(f"‚úÖ Added {key} to {self.env_file}")
            self.env_vars[key] = value
        except Exception as e:
            print(f"‚ùå Error adding {key} to .env file: {e}")

    def setup_keys(self, keys: List[str]):
        """Set up the provided keys in the environment file."""
        if not keys:
            print("No keys provided. Usage: python setup-env.py KEY1 KEY2 ...")
            return

        print(f"üöÄ Setting up environment variables: {', '.join(keys)}")
        print(f"üìÅ Working with .env file: {self.env_file.absolute()}")

        # Create .env file if needed
        self.create_env_file_if_needed()

        missing_keys = []
        existing_keys = []

        # Check which keys are missing
        for key in keys:
            if self.check_key_exists(key):
                existing_keys.append(key)
            else:
                missing_keys.append(key)

        # Report existing keys
        if existing_keys:
            print(f"\n‚úÖ Already configured: {', '.join(existing_keys)}")

        # Set up missing keys
        if missing_keys:
            print(f"\nüîß Need to configure: {', '.join(missing_keys)}")

            for key in missing_keys:
                value = self.get_user_input(key)
                self.add_key_to_env(key, value)

        print(f"\nüéâ Environment setup complete!")
        print(f"üìÑ Your .env file is located at: {self.env_file.absolute()}")

        if missing_keys:
            print(f"‚ú® Added {len(missing_keys)} new environment variable(s)")


def main():
    """Main entry point for the setup script."""
    parser = argparse.ArgumentParser(
        description="Set up environment variables in .env file",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python scripts/setup-env.py DEEPGRAM_API_KEY
  python scripts/setup-env.py DEEPGRAM_API_KEY OPENAI_API_KEY BAML_API_KEY
  python -m scripts.setup-env DEEPGRAM_API_KEY
        """,
    )

    parser.add_argument("keys", nargs="*", help="Environment variable keys to set up (e.g., DEEPGRAM_API_KEY OPENAI_API_KEY)")

    parser.add_argument("--env-file", type=str, help="Path to .env file (default: auto-detect or create .env in current directory)")

    parser.add_argument("--list-common", action="store_true", help="List common environment variables for AuStack")

    args = parser.parse_args()

    if args.list_common:
        print("üîë Common AuStack Environment Variables:")
        print("  DEEPGRAM_API_KEY - For speech-to-text and text-to-speech")
        print("  OPENAI_API_KEY - For OpenAI language models")
        print("  BAML_API_KEY - For BAML language model client")
        print("  ANTHROPIC_API_KEY - For Claude language models")
        print("\nUsage: python scripts/setup-env.py DEEPGRAM_API_KEY OPENAI_API_KEY")
        return

    if not args.keys:
        print("‚ùå No environment keys provided!")
        print("Usage: python scripts/setup-env.py KEY1 KEY2 ...")
        print("Use --list-common to see common keys for AuStack")
        sys.exit(1)

    try:
        env_setup = EnvSetup(args.env_file)
        env_setup.setup_keys(args.keys)
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
